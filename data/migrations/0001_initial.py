# Generated by Django 5.0.6 on 2024-05-22 17:23

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="MendeleyData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("time", models.FloatField(blank=True, db_index=True, null=True)),
                (
                    "aeration_rate",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="Aeration rate(Fg:L/h)",
                        null=True,
                    ),
                ),
                (
                    "agitator_rpm",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="Agitator RPM(RPM:RPM)",
                        null=True,
                    ),
                ),
                (
                    "sugar_feed_rate",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="Sugar feed rate(Fs:L/h)",
                        null=True,
                    ),
                ),
                (
                    "acid_flow_rate",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Acid flow rate(Fa:L/h)",
                        null=True,
                    ),
                ),
                (
                    "base_flow_rate",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Base flow rate(Fb:L/h)",
                        null=True,
                    ),
                ),
                (
                    "heating_cooling_water_flow_rate",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Heating/cooling water flow rate(Fc:L/h)",
                        null=True,
                    ),
                ),
                (
                    "heating_water_flow_rate",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Heating water flow rate(Fh:L/h)",
                        null=True,
                    ),
                ),
                (
                    "water_for_injection_dilution",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="Water for injection/dilution(Fw:L/h)",
                        null=True,
                    ),
                ),
                (
                    "air_head_pressure",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Air head pressure(pressure:bar)",
                        null=True,
                    ),
                ),
                (
                    "dumped_broth_flow",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="Dumped broth flow(Fremoved:L/h)",
                        null=True,
                    ),
                ),
                (
                    "substrate_concentration",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Substrate concentration(S:g/L)",
                        null=True,
                    ),
                ),
                (
                    "dissolved_oxygen_concentration",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Dissolved oxygen concentration(DO2:mg/L)",
                        null=True,
                    ),
                ),
                (
                    "penicillin_concentration",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Penicillin concentration(P:g/L)",
                        null=True,
                    ),
                ),
                (
                    "vessel_volume",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="Vessel Volume(V:L)",
                        null=True,
                    ),
                ),
                (
                    "vessel_weight",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Vessel Weight(Wt:Kg)",
                        null=True,
                    ),
                ),
                (
                    "ph",
                    models.FloatField(
                        blank=True, db_index=True, help_text="pH(pH:pH)", null=True
                    ),
                ),
                (
                    "temperature",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Temperature(T:K)",
                        null=True,
                    ),
                ),
                (
                    "generated_heat",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Generated heat(Q:kJ)",
                        null=True,
                    ),
                ),
                (
                    "carbon_dioxide_percent_in_off_gas",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="carbon dioxide percent in off-gas(CO2outgas:%)",
                        null=True,
                    ),
                ),
                (
                    "paa_flow",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="PAA flow(Fpaa:PAA flow (L/h))",
                        null=True,
                    ),
                ),
                (
                    "paa_concentration_offline",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="PAA concentration offline(PAA_offline:PAA (g L^{-1}))",
                        null=True,
                    ),
                ),
                (
                    "oil_flow",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="Oil flow(Foil:L/hr)",
                        null=True,
                    ),
                ),
                (
                    "nh_3_concentration_off_line",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="NH_3 concentration off-line(NH3_offline:NH3 (g L^{-1}))",
                        null=True,
                    ),
                ),
                (
                    "oxygen_uptake_rate",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Oxygen Uptake Rate(OUR:(g min^{-1}))",
                        null=True,
                    ),
                ),
                (
                    "offline_penicillin_concentration",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Offline Penicillin concentration(P_offline:P(g L^{-1}))",
                        null=True,
                    ),
                ),
                (
                    "offline_biomass_concentration",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Offline Biomass concentratio(X_offline:X(g L^{-1}))",
                        null=True,
                    ),
                ),
                (
                    "carbon_evolution_rate",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Carbon evolution rate(CER:g/h)",
                        null=True,
                    ),
                ),
                (
                    "ammonia_shots",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="Ammonia shots(NH3_shots:kgs)",
                        null=True,
                    ),
                ),
                (
                    "viscosity",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Viscosity(Viscosity_offline:centPoise)",
                        null=True,
                    ),
                ),
                (
                    "fault_reference",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="Fault reference(Fault_ref:Fault ref)",
                        null=True,
                    ),
                ),
                (
                    "control_reference",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="0 - Recipe driven 1 - Operator controlled(Control_ref:Control ref)",
                        null=True,
                    ),
                ),
                (
                    "raman_spec",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="1- No Raman spec 1-Raman spec recorded",
                        null=True,
                    ),
                ),
                (
                    "pat_control",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="2-PAT control(PAT_ref:PAT ref)",
                        null=True,
                    ),
                ),
                (
                    "batch_reference",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        help_text="Batch reference(Batch_ref:Batch ref)",
                        null=True,
                    ),
                ),
                (
                    "batch_id",
                    models.FloatField(
                        blank=True, db_index=True, help_text="Batch ID", null=True
                    ),
                ),
                (
                    "fault_flag",
                    models.FloatField(
                        blank=True, db_index=True, help_text="Fault flag", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Mendeley Datum",
                "verbose_name_plural": "Mendeley Data",
            },
        ),
    ]
